local mjalg = require("MJ_Algorithm")
local mjtable = require("mjtable")
local socket = require("socket")

function PrintTable(tbl, level, filteDefault)
    local msg = ""
    filteDefault = filteDefault or true --默认过滤关键字（DeleteMe, _class_type）
    level = level or 1
    local indent_str = ""
    for i = 1, level do
        indent_str = indent_str.."  "
    end

    print(indent_str .. "{")
    for k, v in pairs(tbl) do
        if filteDefault then
            if k ~= "_class_type" and k ~= "DeleteMe" then
                local item_str = string.format("%s%s = %s", indent_str .. " ", tostring(k), tostring(v))
                print(item_str)
                if type(v) == "table" then
                    PrintTable(v, level + 1)
                end
            end
        else
            local item_str = string.format("%s%s = %s", indent_str .. " ", tostring(k), tostring(v))
            print(item_str)
            if type(v) == "table" then
                PrintTable(v, level + 1)
            end
        end
    end
    print(indent_str .. "}")
end

local function getcolor(value)
    return math.floor(value/0x10)
end
local function getvalue(value)
    return value%0x10
end

local function PrintTableBy64(list)
    if type(list) ~= "table" then
        print("error local function PrintTableBy64(list)")
        return
    else
        print("{")
        local strTotal = " "
        for i = 1, #list do
            local str = string.format("0x%02x", list[i])
            strTotal = strTotal .. str .. ", "
        end
        print(strTotal)
        print("{")
    end
end

-- local test = {0x35,0x35,0x03,0x05,0x07,0x07,0x11,0x13,0x14,0x15,0x16}
-- local test = {0x35,0x35,0x01,0x03,0x04,0x05,0x06,0x04,0x05,0x06,0x07,0x09,0x11,0x11,0x11,0x21,0x21} -- 13456和45679
-- local test = {0x35,0x19,0x01,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x019,0x19,0x11,0x11,0x11,0x21,0x21} -- 12346789
-- local test = {0x35,0x35,0x01,0x03,0x04,0x05,0x06,0x04,0x05,0x06,0x07,0x09,0x11,0x12,0x13,0x14,0x14} -- 1金3456和4567金9和123将将
-- local test = {0x35,0x19,0x01,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x019,0x19,0x11,0x11,0x11,0x21,0x35} -- 1234金6789和金将
-- local test = {0x35,0x35,0x35,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x019,0x19,0x11,0x11,0x11,0x21,0x21} -- 1234金6789和金将
-- local test = {0x35,0x06,0x07,0x08,0x13,0x13,0x15,0x16}

-- local test = {0x02,0x03,0x04,0x06,0x07,0x14,0x14,0x15,0x15,0x26,0x27,0x28,0x35,0x35}    -- 去除先找对子的环节出现的BUG
-- local test = {0x11,0x11,0x11,0x12,0x12,0x13,0x14,0x15,0x15,0x15,0x16,0x17,0x18,0x19,0x19,0x19,0x35} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x35,0x04,0x05,0x12,0x12,0x13,0x13,0x15,0x16,0x22,0x23,0x24,0x27,0x28,0x29,0x17} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x01,0x02,0x03,0x07,0x08,0x15,0x15,0x16,0x17,0x18,0x19,0x19,0x15} -- 去除先找对子的环节出现的BUG
-- local test = {0x01,0x02,0x03,0x04,0x04,0x05,0x06,0x07,0x14,0x15,0x26,0x27,0x28,0x13} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x35,0x02,0x02,0x12,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x19} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x35,0x02,0x03,0x12,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x15} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x35,0x01,0x02,0x03,0x05,0x16,0x16,0x18,0x18,0x03} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x05,0x06,0x11,0x11,0x12,0x13,0x14,0x15,0x15,0x07} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x08,0x09,0x23,0x23,0x24,0x24,0x25,0x26,0x27,0x28,0x28,0x23} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x25,0x27,0x28,0x28,0x28,0x29,0x29} -- 去除先找对子的环节出现的BUG
-- local test = {0x35,0x35,0x17,0x19,0x23,0x24,0x25,0x26,0x26,0x28,0x28} -- 去除先找对子的环节出现的BUG


-- local test = {0x01,0x03,0x04,0x05,0x06,0x04,0x05,0x06,0x07,0x09,0x11,0x11,0x11} -- 13456和45679
-- local test = {0x35,0x35,0x03,0x05,0x11,0x13,0x14,0x15,0x16}

-- 生成牌代码生成的不能胡的牌
local Test = {
    -- 1、3566679，尹哥那套也胡不了1345679
    -- 0x35,
    -- 0x17,
    -- 0x19,
    -- 0x09,
    -- 0x08,
    -- 0x07,
    -- 0x13,
    -- 0x35,
    -- 0x15,
    -- 0x29,
    -- 0x29,
    -- 0x29,
    -- 0x16,
    -- 0x16,
    -- 0x16,
    -- 0x09,
    -- 0x09

    -- -- 2、2334567889，要从两边往中间找，尹哥那套也胡不了
    -- 0x02,
    -- 0x03,
    -- 0x35,
    -- 0x25,
    -- 0x26,
    -- 0x27,
    -- 0x03,
    -- 0x04,
    -- 0x05,
    -- 0x06,
    -- 0x07,
    -- 0x08,
    -- 0x35,
    -- 0x08,
    -- 0x09,
    -- 0x11,
    -- 0x11

    -- -- 4、1223456778，要从两边往中间找24 57，尹哥那套也胡不了
    -- 0x13	,
    -- 0x14	,
    -- 0x14	,
    -- 0x15	,
    -- 0x21	,
    -- 0x22	,
    -- 0x22	,
    -- 0x23	,
    -- 0x24	,
    -- 0x25	,
    -- 0x26	,
    -- 0x27	,
    -- 0x27	,
    -- 0x28	,
    -- 0x35	,
    -- 0x35	,
    -- 0x35	,

    -- -- 5、3556666779，尹哥那套也胡不了
    -- 0x13	,
    -- 0x14	,
    -- 0x15	,
    -- 0x16	,
    -- 0x23	,
    -- 0x25	,
    -- 0x25	,
    -- 0x26	,
    -- 0x26	,
    -- 0x26	,
    -- 0x26	,
    -- 0x27	,
    -- 0x27	,
    -- 0x29	,
    -- 0x35	,
    -- 0x35	,
    -- 0x35	,

    -- -- 6、2334566788，要从两边往中间找35 68，尹哥那套也胡不了35,68
    -- 0x07	,
    -- 0x08	,
    -- 0x13	,
    -- 0x13	,
    -- 0x22	,
    -- 0x23	,
    -- 0x23	,
    -- 0x24	,
    -- 0x25	,
    -- 0x26	,
    -- 0x26	,
    -- 0x27	,
    -- 0x28	,
    -- 0x28	,
    -- 0x35	,
    -- 0x35	,
    -- 0x35	,

    -- -- 7、23457778899，要从两边往中间找，尹哥那套也胡不了57778899(别的都已解决，就它尚未解决!!!!!)
    -- 0x02	,
    -- 0x03	,
    -- 0x04	,
    -- 0x05	,
    -- 0x07	,
    -- 0x07	,
    -- 0x07	,
    -- 0x08	,
    -- 0x08	,
    -- 0x09	,
    -- 0x09	,
    -- 0x16	,
    -- 0x16	,
    -- 0x26	,
    -- 0x28	,
    -- 0x35	,
    -- 0x35	,

    -- -- 8、1333445568，尹哥那套也胡不了
    -- 0x01	,
    -- 0x03	,
    -- 0x03	,
    -- 0x03	,
    -- 0x04	,
    -- 0x04	,
    -- 0x05	,
    -- 0x05	,
    -- 0x06	,
    -- 0x08	,
    -- 0x25	,
    -- 0x27	,
    -- 0x29	,
    -- 0x29	,
    -- 0x35	,
    -- 0x35	,
    -- 0x35	,

    -- 0x13, 0x22, 0x23, 0x24, 0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x35, 0x35, 
    -- 0x35, 0x06, 0x06, 0x07, 0x12, 0x12, 0x13, 0x14, 0x15, 015, 0x16, 0x17, 0x17, 0x19, 0x21, 0x21, 0x23, 

    -- 0x35,0x35,0x03,0x05,0x07,0x07,0x11,0x13,0x14,0x15,0x16
    -- 0x35,0x35,0x01,0x03,0x04,0x05,0x06,0x04,0x05,0x06,0x07,0x09,0x11,0x11,0x11,0x21,0x21 -- 13456和45679
    -- 0x35,0x19,0x01,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x019,0x19,0x11,0x11,0x11,0x21,0x21 -- 12346789
    -- 0x35,0x35,0x01,0x03,0x04,0x05,0x06,0x04,0x05,0x06,0x07,0x09,0x11,0x12,0x13,0x14,0x14 -- 1金3456和4567金9和123将将
    -- 0x35,0x19,0x01,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x019,0x19,0x11,0x11,0x11,0x21,0x35 -- 1234金6789和金将
    -- 0x35,0x35,0x35,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x019,0x19,0x11,0x11,0x11,0x21,0x21 -- 1234金6789和金将

    -- 0x02, 0x02, 0x11, 0x11, 0x13, 0x13, 0x21, 0x21, 0x23, 0x23, 0x08, 0x08, 0x17
    -- 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x09, 0x15, 0x17, 0x24, 0x25, 0x27, 0x29, 0x37, 0x37, 0x37, 0x37
    -- 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x09, 0x15, 0x17, 0x24, 0x25, 0x27, 0x29, 0x37, 0x37, 0x37
    -- 0x06, 0x07, 0x08, 0x08, 0x08, 0x08, 0x18, 0x19, 0x17, 0x26, 0x27, 0x28, 0x28, 0x29, 0x27, 0x35, 0x37
    0x19,0x19,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x06,0x07,0x07,0x08,0x08,0x09,0x09

    -- 0x03, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x14, 0x16, 0x17, 0x18, 0x19, 0x23, 0x24, 0x35, 0x35, 0x35, 
}
local canHuTest = {
    -- 0x35, 0x35, 0x03, 0x05, 0x12, 0x13, 0x21, 0x22, 0x23, 0x07, 0x08, 0x09, 0x17, 0x18, 0x19, 0x35
    0x02, 0x02, 0x11, 0x11, 0x13, 0x13, 0x21, 0x21, 0x23, 0x23, 0x08, 0x08, 0x17
}
local tingHuTest = {
    -- 0x33, 0x33, 0x33, 0x11, 0x12, 0x13, 0x21, 0x22, 0x23, 0x07, 0x08, 0x09, 0x17, 0x18, 0x19, 0x27, 0x35
    -- 0x17, 0x17, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x07, 0x08, 0x09
    -- 0x02, 0x02, 0x11, 0x11, 0x13, 0x13, 0x21, 0x21, 0x23, 0x23, 0x08, 0x08, 0x17, 0x35
    0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x09, 0x15, 0x17, 0x24, 0x25, 0x27, 0x29, 0x37, 0x37, 0x37, 0x37
}
local huPaiTest_index = {
    0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4
}
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@start@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@start@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@start@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@start@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@start@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@start@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")

-- local time1 = os.clock()
-- local IsHu = mjalg:HuPai(Test, {0x37})
-- -- local IsHu = mjalg:HuPai(test, 0x35)
-- local time2 = os.clock()
-- print("during time = ", time2 - time1)
-- print("IsHu =", IsHu)

-- local time1 = os.clock()
-- local canHuCard = mjalg:EstimateCanHu(canHuTest, {0x35})
-- local time2 = os.clock()
-- print("during time = ", time2 - time1)
-- print("EstimateCanHu(), cardList is")
-- PrintTableBy64(canHuTest)
-- print("isCanHu =")
-- PrintTableBy64(canHuCard)

-- local time1 = os.clock()
-- local tingHuCard, youJinCard = mjalg:EstimateTingHu(tingHuTest, {0x37})
-- local time2 = os.clock()
-- print("during time = ", time2 - time1)
-- print("EstimateTingHu(), cardList is")
-- PrintTableBy64(tingHuTest)
-- print("tingHuCard =")
-- PrintTable(tingHuCard)
-- print("youJinCard =")
-- PrintTableBy64(youJinCard)

local time1 = os.clock()
local isinit = mjtable.init()
local time2 = os.clock()
local ishupai = mjtable.hupai(Test, 0x19)
-- -- 如下跑100W次用1.5秒
-- local ishupai = 0
-- for i = 1, 1000000 do
--     ishupai = mjtable.hupai(huPaiTest_index, 33)
-- end
-- local istinghu = mjtable.tinghu(Test, 0x00)
-- local iscanhu = mjtable.canhu(Test, 0x46)
local time3 = os.clock()
print("ishupai = ", ishupai)
-- print("istinghu = ", istinghu)
-- print("iscanhu = ", iscanhu)
-- PrintTable(istinghu)
-- PrintTable(iscanhu)
print("during time = ", time2 - time1, time3 - time2)

print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@end@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@end@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@end@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@end@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@end@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@end@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")

-- 模拟做牌测试

--麻将
local mj_cardAarry = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,					-- 万子
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,					-- 万子
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,					-- 万子
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,					-- 万子
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,					-- 索子
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,					-- 索子
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,					-- 索子
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,					-- 索子
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,					-- 同子
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,					-- 同子
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,					-- 同子
    0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,					-- 同子
    0x31, 0x31, 0x31, 0x31,												    -- 东风
	0x32, 0x32, 0x32, 0x32,												    -- 西风
	0x33, 0x33, 0x33, 0x33,												    -- 南风
	0x34, 0x34, 0x34, 0x34,												    -- 北风
	0x35, 0x35, 0x35, 0x35,												    -- 中
	0x36, 0x36, 0x36, 0x36,												    -- 发
	0x37, 0x37, 0x37, 0x37,												    -- 白
	-- 0x41, 0x42, 0x43, 0x44,												    -- 春夏秋冬
	-- 0x45, 0x46, 0x47, 0x48												    -- 梅兰菊竹
}

math.randomseed(tostring(os.time()):reverse():sub(1, 7))

local checkNum = 0
local successNum = 0

print("------------------------------------------------------------------------------------------------------")
print("tring...")
local maxWaveNum = 4
while(true)
do
    -- print("------------------------------------------------------------------------------------------------------")
    local test = {}
    local index = 0
    local card = 0x00
    local cardNum = {}
    for i = 1, 9 do
        cardNum[i] = 0
        cardNum[i + 0x10] = 0
        cardNum[i + 0x20] = 0
    end
    for i = 1, 7 do
        cardNum[i + 0x30] = 0
    end
    -- for i = 1, 8 do
    --     cardNum[i + 0x40] = 0
    -- end
    local n = math.random(0, maxWaveNum) --
    -- local n = 5
    -- 随机n个吃
    local eat = 0
    while(eat < n)
    do
        index = math.random(1, #mj_cardAarry)
        card = mj_cardAarry[index]
        if getcolor(card) <= 2 then
            if getvalue(card) <= 7 then
                card = card
            elseif getvalue(card) == 8 then
                card = card - 1
            elseif getvalue(card) == 9 then
                card = card - 2
            end
            if cardNum[card] < 4 and cardNum[card + 1] < 4 and cardNum[card + 2] < 4 then
                table.insert(test, card)
                table.insert(test, card + 1)
                table.insert(test, card + 2)
                cardNum[card] = cardNum[card] + 1
                cardNum[card + 1] = cardNum[card + 1] + 1
                cardNum[card + 2] = cardNum[card + 2] + 1
                eat = eat + 1
            end
        end
    end
    -- 随机5 - n个碰
    local peng = 0
    while(peng < (maxWaveNum - n))
    do
        index = math.random(1, #mj_cardAarry)
        card = mj_cardAarry[index]
        if cardNum[card] < 2 then
            table.insert(test, card)
            table.insert(test, card)
            table.insert(test, card)
            cardNum[card] = cardNum[card] + 3
            peng = peng + 1
        end
    end
    -- 随机一个对子
    while(true)
    do
        index = math.random(1, #mj_cardAarry)
        card = mj_cardAarry[index]
        if cardNum[card] < 3 then
            table.insert(test, card)
            table.insert(test, card)
            cardNum[card] = cardNum[card] + 2
            break
        end
    end
    -- 随机m个牌是癞子
    local m = math.random(0, 4)
    -- local m = 2
    local relyNum = m - cardNum[0x35]
    if relyNum > 0 then
        for i = 1, relyNum do
            index = math.random(1, #test)
            if test[index] ~= 0x35 then
                test[index] = 0x35
            end
        end
    end
    -- PrintTableBy64(test)
    -- print("eat = "..eat..", peng = " .. peng .. ", laizi = " .. m)

    local ishu
    -- 判断是否能胡
    -- ishu = mjalg:HuPai(test, {0x35})
    ishu = mjtable.hupai(test, 0x35)
    -- ishu = mjalg:AnalyseCardWithoutItem(test, 0x35)
    -- ishu = mjalg:HuPai_DuiZi(test, 0x35)
    -- ishu = mjalg:isAllThree(test, 0x35)
    -- 不能胡，返回不能胡的牌型
    if not ishu or ishu == 0 then
        print("mei hu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        print("cardlist is")
        table.sort(test, function(a, b) return (a) < (b) end)
        PrintTableBy64(test)
        print("mei hu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        print("failureNum, successNum, checkNum, sucess probability =",checkNum - successNum, successNum, checkNum, successNum / checkNum)
        -- break
    else
        successNum = successNum + 1
    end
    checkNum = checkNum + 1
    -- print("cardlist is")
    -- table.sort(test, function(a, b) return (a) < (b) end)
    -- PrintTableBy64(test)
    if checkNum % 10000 == 0 then
        print("failureNum, successNum, checkNum, sucess probability =",checkNum - successNum, successNum, checkNum, successNum / checkNum)
    end
    -- print("------------------------------------------------------------------------------------------------------")
    -- socket.sleep(0.001)
end